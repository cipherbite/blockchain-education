import React, { useState, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";

const vulnerabilityTrendData = [
  { year: 2018, count: 632 },
  { year: 2019, count: 978 },
  { year: 2020, count: 1321 },
  { year: 2021, count: 1879 },
  { year: 2022, count: 2452 },
];

const commonVulnerabilities = [
  {
    name: "Reentrancy",
    description:
      "Occurs when a function can be interrupted and called again before its first execution is completed.",
    example: `function withdraw(uint amount) {
  if (balances[msg.sender] >= amount) {
    msg.sender.call.value(amount)();
    balances[msg.sender] -= amount;
  }
}`,
    mitigation:
      "Use the checks-effects-interactions pattern or reentrancy guards.",
    impact: "High",
    frequency: "Common",
  },
  {
    name: "Integer Overflow/Underflow",
    description:
      "Happens when an arithmetic operation exceeds the maximum or minimum size of the integer type.",
    example: `uint8 counter = 255;
counter++;  // Overflows to 0`,
    mitigation:
      "Use SafeMath library or Solidity 0.8.0+ which includes built-in overflow checks.",
    impact: "High",
    frequency: "Common",
  },
  {
    name: "Unchecked External Calls",
    description:
      "When the return value of a low-level call is not checked, leading to silent failures.",
    example: `address.call.value(amount)();  // No check on return value`,
    mitigation:
      "Always check the return value of low-level calls and handle potential failures.",
    impact: "Medium",
    frequency: "Common",
  },
  {
    name: "Access Control",
    description:
      "Improper implementation of access controls, allowing unauthorized actions.",
    example: `function sensitiveOperation() public {
  // No access control check
}`,
    mitigation: "Implement proper access control modifiers and checks.",
    impact: "High",
    frequency: "Very Common",
  },
];

const AreaChart = ({ data }) => {
  const maxCount = Math.max(...data.map((d) => d.count));
  const minYear = Math.min(...data.map((d) => d.year));
  const maxYear = Math.max(...data.map((d) => d.year));

  return (
    <svg viewBox="0 0 500 300" className="w-full h-full">
      <defs>
        <linearGradient id="areaGradient" x1="0" x2="0" y1="0" y2="1">
          <stop offset="0%" stopColor="#6366f1" stopOpacity={0.8} />
          <stop offset="100%" stopColor="#6366f1" stopOpacity={0.2} />
        </linearGradient>
      </defs>
      {/* Grid lines */}
      {[0, 1, 2, 3, 4].map((i) => (
        <line
          key={i}
          x1="50"
          y1={50 + i * 50}
          x2="450"
          y2={50 + i * 50}
          stroke="#4b5563"
          strokeDasharray="3 3"
        />
      ))}
      {/* Y-axis */}
      <line x1="50" y1="50" x2="50" y2="250" stroke="#9ca3af" />
      {[0, 1, 2, 3, 4].map((i) => (
        <text
          key={i}
          x="45"
          y={255 - i * 50}
          fill="#9ca3af"
          textAnchor="end"
          fontSize="12"
        >
          {Math.round((maxCount * i) / 4)}
        </text>
      ))}
      {/* X-axis */}
      <line x1="50" y1="250" x2="450" y2="250" stroke="#9ca3af" />
      {data.map((d, i) => (
        <text
          key={i}
          x={50 + i * 100}
          y="270"
          fill="#9ca3af"
          textAnchor="middle"
          fontSize="12"
        >
          {d.year}
        </text>
      ))}
      {/* Area */}
      <path
        d={`M${data
          .map((d, i) => `${50 + i * 100},${250 - (d.count / maxCount) * 200}`)
          .join(" L")} L450,250 L50,250 Z`}
        fill="url(#areaGradient)"
        stroke="#6366f1"
        strokeWidth="2"
      />
      {/* Data points */}
      {data.map((d, i) => (
        <circle
          key={i}
          cx={50 + i * 100}
          cy={250 - (d.count / maxCount) * 200}
          r="4"
          fill="#6366f1"
        />
      ))}
    </svg>
  );
};

const VulnerabilityCard = ({ vulnerability, isOpen, toggleOpen }) => {
  return (
    <motion.div
      className="bg-gray-800 rounded-lg overflow-hidden shadow-lg"
      layout
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <motion.button
        className="w-full text-left px-6 py-4 flex justify-between items-center"
        onClick={toggleOpen}
      >
        <h4 className="text-xl font-semibold text-indigo-300">
          {vulnerability.name}
        </h4>
        <motion.svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="text-indigo-300"
          animate={{ rotate: isOpen ? 180 : 0 }}
        >
          <polyline points="6 9 12 15 18 9"></polyline>
        </motion.svg>
      </motion.button>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className="px-6 pb-4"
          >
            <p className="text-gray-300 mb-4">{vulnerability.description}</p>
            <div className="bg-gray-900 p-4 rounded-lg mb-4">
              <h5 className="text-indigo-300 font-semibold mb-2">Example:</h5>
              <pre className="text-sm text-gray-300 whitespace-pre-wrap">
                {vulnerability.example}
              </pre>
            </div>
            <p className="text-gray-300 mb-2">
              <strong className="text-indigo-300">Mitigation:</strong>{" "}
              {vulnerability.mitigation}
            </p>
            <p className="text-gray-300 mb-2">
              <strong className="text-indigo-300">Impact:</strong>{" "}
              {vulnerability.impact}
            </p>
            <p className="text-gray-300">
              <strong className="text-indigo-300">Frequency:</strong>{" "}
              {vulnerability.frequency}
            </p>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

const Vulnerabilities = () => {
  const [openVulnerability, setOpenVulnerability] = useState(null);
  const [chartData, setChartData] = useState(vulnerabilityTrendData);

  useEffect(() => {
    const interval = setInterval(() => {
      setChartData((prevData) => {
        const newData = [...prevData];
        const lastYear = newData[newData.length - 1].year;
        const newCount = Math.floor(
          newData[newData.length - 1].count * (1 + Math.random() * 0.2)
        );
        newData.push({ year: lastYear + 1, count: newCount });
        if (newData.length > 6) newData.shift();
        return newData;
      });
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  const toggleVulnerability = useCallback(
    (index) => {
      setOpenVulnerability(openVulnerability === index ? null : index);
    },
    [openVulnerability]
  );

  return (
    <div className="bg-gray-900 text-gray-100 p-8 rounded-xl shadow-2xl max-w-4xl mx-auto">
      <motion.h2
        className="text-4xl font-bold mb-8 text-center text-indigo-400"
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        Smart Contract Vulnerabilities
      </motion.h2>

      <motion.div
        className="mb-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2, duration: 0.5 }}
      >
        <h3 className="text-2xl font-semibold mb-4 text-indigo-300">
          Vulnerability Trends
        </h3>
        <div className="bg-gray-800 p-4 rounded-lg shadow-inner">
          <AreaChart data={chartData} />
        </div>
        <p className="text-gray-400 mt-2 text-sm">
          This chart illustrates the increasing trend of reported smart contract
          vulnerabilities over the years, emphasizing the growing importance of
          rigorous security practices in blockchain development.
        </p>
      </motion.div>

      <motion.div
        className="mb-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.4, duration: 0.5 }}
      >
        <h3 className="text-2xl font-semibold mb-4 text-indigo-300">
          Common Vulnerabilities
        </h3>
        <div className="space-y-4">
          {commonVulnerabilities.map((vuln, index) => (
            <VulnerabilityCard
              key={index}
              vulnerability={vuln}
              isOpen={openVulnerability === index}
              toggleOpen={() => toggleVulnerability(index)}
            />
          ))}
        </div>
      </motion.div>

      <motion.div
        className="bg-indigo-900 bg-opacity-30 p-6 rounded-lg mt-8"
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6, duration: 0.5 }}
      >
        <h3 className="text-xl font-semibold text-indigo-300 mb-4">
          Best Practices for Vulnerability Prevention
        </h3>
        <ul className="list-disc list-inside text-gray-300 space-y-2">
          <li>Conduct thorough code reviews and audits</li>
          <li>Utilize automated vulnerability scanners</li>
          <li>Implement comprehensive test suites</li>
          <li>
            Adhere to established security patterns and use vetted libraries
          </li>
          <li>
            Stay informed about the latest security developments in the
            blockchain space
          </li>
          <li>Consider formal verification for critical contracts</li>
        </ul>
      </motion.div>

      <motion.div
        className="mt-8 text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.8, duration: 0.5 }}
      ></motion.div>
    </div>
  );
};

export default Vulnerabilities;
