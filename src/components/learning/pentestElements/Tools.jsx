import React, { useState, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  PieChart,
  Pie,
  RadarChart,
  Radar,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Cell,
  ResponsiveContainer,
} from "recharts";

const COLORS = [
  "#FF6384",
  "#36A2EB",
  "#FFCE56",
  "#4BC0C0",
  "#9966FF",
  "#FF9F40",
  "#4BCFFA",
  "#0BE881",
  "#FF6B6B",
];

const toolUsageData = [
  {
    name: "MythX",
    usage: 92,
    description: "Comprehensive smart contract security analyzer",
    features: ["Static analysis", "Symbolic execution", "Fuzzing"],
    github: "ConsenSys/mythx-cli",
  },
  {
    name: "Slither",
    usage: 88,
    description: "Static analysis framework for Solidity",
    features: [
      "Vulnerability detector",
      "Code optimization",
      "Custom rule creation",
    ],
    github: "crytic/slither",
  },
  {
    name: "Echidna",
    usage: 79,
    description: "Ethereum smart contract fuzzer",
    features: [
      "Property-based testing",
      "Contract fuzzing",
      "Automated test generation",
    ],
    github: "crytic/echidna",
  },
  {
    name: "Manticore",
    usage: 75,
    description: "Symbolic execution tool for smart contracts",
    features: [
      "Path exploration",
      "Input generation",
      "Vulnerability detection",
    ],
    github: "trailofbits/manticore",
  },
  {
    name: "Securify",
    usage: 71,
    description: "Security scanner for Ethereum smart contracts",
    features: [
      "Formal verification",
      "Automated reasoning",
      "Pattern-based analysis",
    ],
    github: "eth-sri/securify2",
  },
];

const AdvancedChart = ({ data, type }) => {
  const chartData = data.map((item, index) => ({
    name: item.name,
    value: item.usage,
    color: COLORS[index % COLORS.length],
  }));

  return (
    <ResponsiveContainer width="100%" height={400}>
      {type === "pie" ? (
        <PieChart>
          <Pie
            data={chartData}
            dataKey="value"
            nameKey="name"
            cx="50%"
            cy="50%"
            outerRadius={150}
            label
          >
            {chartData.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={entry.color} />
            ))}
          </Pie>
        </PieChart>
      ) : (
        <RadarChart cx="50%" cy="50%" outerRadius="80%" data={chartData}>
          <PolarGrid />
          <PolarAngleAxis dataKey="name" />
          <PolarRadiusAxis />
          <Radar
            dataKey="value"
            stroke="#8884d8"
            fill="#8884d8"
            fillOpacity={0.6}
          />
        </RadarChart>
      )}
    </ResponsiveContainer>
  );
};

const ToolCard = ({ name, usage, description, features, github }) => (
  <motion.div
    className="bg-gray-800 rounded-lg p-6 shadow-xl"
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.3 }}
  >
    <h4 className="text-2xl font-bold text-indigo-400 mb-2">{name}</h4>
    <div className="flex items-center mb-4">
      <div className="w-full bg-gray-700 rounded-full h-2.5 mr-2">
        <div
          className="bg-indigo-600 h-2.5 rounded-full"
          style={{ width: `${usage}%` }}
        />
      </div>
      <span className="text-indigo-300 font-semibold">{usage}%</span>
    </div>
    <p className="text-gray-300 mb-4">{description}</p>
    <h5 className="text-lg font-semibold text-indigo-300 mb-2">
      Key Features:
    </h5>
    <ul className="list-disc list-inside text-gray-300 mb-4">
      {features.map((feature, index) => (
        <li key={index}>{feature}</li>
      ))}
    </ul>
    <a
      href={`https://github.com/${github}`}
      target="_blank"
      rel="noopener noreferrer"
      className="text-indigo-400 hover:text-indigo-300 transition-colors duration-200"
    >
      GitHub Repository
    </a>
  </motion.div>
);

const Tools = () => {
  const [activeTab, setActiveTab] = useState("overview");
  const [chartType, setChartType] = useState("pie");

  const sortedData = useMemo(
    () => [...toolUsageData].sort((a, b) => b.usage - a.usage),
    []
  );

  return (
    <div className="bg-gray-900 text-gray-100 p-8 rounded-xl shadow-2xl max-w-7xl mx-auto">
      <motion.h2
        className="text-5xl font-bold mb-12 text-center text-indigo-400"
        initial={{ opacity: 0, y: -30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        Smart Contract Analysis Tools
      </motion.h2>

      <nav className="mb-12">
        <ul className="flex justify-center space-x-6">
          {["Overview", "Tool Details", "Comparison"].map((tab) => (
            <motion.li
              key={tab}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <button
                className={`px-6 py-3 rounded-full text-lg ${
                  activeTab === tab.toLowerCase().replace(" ", "-")
                    ? "bg-indigo-600 text-white"
                    : "bg-gray-800 text-gray-300 hover:bg-gray-700"
                } transition-colors duration-200`}
                onClick={() =>
                  setActiveTab(tab.toLowerCase().replace(" ", "-"))
                }
              >
                {tab}
              </button>
            </motion.li>
          ))}
        </ul>
      </nav>

      <AnimatePresence mode="wait">
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
        >
          {activeTab === "overview" && (
            <div>
              <div className="flex justify-center mb-8">
                <button
                  className={`px-4 py-2 rounded-l-full ${
                    chartType === "pie"
                      ? "bg-indigo-600 text-white"
                      : "bg-gray-800 text-gray-300"
                  }`}
                  onClick={() => setChartType("pie")}
                >
                  Pie Chart
                </button>
                <button
                  className={`px-4 py-2 rounded-r-full ${
                    chartType === "radar"
                      ? "bg-indigo-600 text-white"
                      : "bg-gray-800 text-gray-300"
                  }`}
                  onClick={() => setChartType("radar")}
                >
                  Radar Chart
                </button>
              </div>
              <AdvancedChart data={sortedData} type={chartType} />
              <p className="text-center mt-8 text-gray-400">
                This chart showcases the adoption rates of popular smart
                contract analysis tools, highlighting the industry's focus on
                comprehensive security measures and automated vulnerability
                detection.
              </p>
            </div>
          )}

          {activeTab === "tool-details" && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {sortedData.map((tool, index) => (
                <ToolCard key={index} {...tool} />
              ))}
            </div>
          )}

          {activeTab === "comparison" && (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-gray-800 text-gray-300">
                <thead>
                  <tr className="bg-gray-700">
                    <th className="px-6 py-3 text-left">Tool</th>
                    <th className="px-6 py-3 text-left">Usage</th>
                    <th className="px-6 py-3 text-left">Description</th>
                    <th className="px-6 py-3 text-left">Key Features</th>
                  </tr>
                </thead>
                <tbody>
                  {sortedData.map((tool, index) => (
                    <tr
                      key={index}
                      className={
                        index % 2 === 0 ? "bg-gray-800" : "bg-gray-750"
                      }
                    >
                      <td className="px-6 py-4 font-semibold text-indigo-400">
                        {tool.name}
                      </td>
                      <td className="px-6 py-4">{tool.usage}%</td>
                      <td className="px-6 py-4">{tool.description}</td>
                      <td className="px-6 py-4">
                        <ul className="list-disc list-inside">
                          {tool.features.map((feature, fIndex) => (
                            <li key={fIndex}>{feature}</li>
                          ))}
                        </ul>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </motion.div>
      </AnimatePresence>

      <motion.div
        className="mt-16 bg-gray-800 p-8 rounded-lg shadow-inner"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3, duration: 0.5 }}
      >
        <h3 className="text-3xl font-bold mb-6 text-indigo-400">
          Best Practices for Smart Contract Security Tools
        </h3>
        <ul className="space-y-4 text-gray-300">
          <motion.li
            className="flex items-start"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.4, duration: 0.3 }}
          >
            <svg
              className="w-6 h-6 text-indigo-500 mr-3 flex-shrink-0"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            Combine static analysis, symbolic execution, and fuzzing for
            comprehensive security
          </motion.li>
          <motion.li
            className="flex items-start"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5, duration: 0.3 }}
          >
            <svg
              className="w-6 h-6 text-indigo-500 mr-3 flex-shrink-0"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            Regularly update tools to address new vulnerabilities and attack
            vectors
          </motion.li>
          <motion.li
            className="flex items-start"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.6, duration: 0.3 }}
          >
            <svg
              className="w-6 h-6 text-indigo-500 mr-3 flex-shrink-0"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            Implement continuous integration for automated security checks
            during development
          </motion.li>
          <motion.li
            className="flex items-start"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.7, duration: 0.3 }}
          >
            <svg
              className="w-6 h-6 text-indigo-500 mr-3 flex-shrink-0"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            Utilize formal verification techniques for critical smart contract
            components
          </motion.li>
          <motion.li
            className="flex items-start"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.8, duration: 0.3 }}
          >
            <svg
              className="w-6 h-6 text-indigo-500 mr-3 flex-shrink-0"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            Combine automated tools with manual code review for comprehensive
            security audits
          </motion.li>
        </ul>
      </motion.div>
    </div>
  );
};

export default Tools;
