import React, {
  useState,
  useMemo,
  useCallback,
  useEffect,
  useRef,
} from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Shield,
  Terminal,
  Search,
  AlertTriangle,
  FileText,
  Code,
  Settings,
  Play,
  Zap,
} from "lucide-react";
import Methodology from "./pentestElements/Methodology";
import Tools from "./pentestElements/Tools";
import Vulnerabilities from "./pentestElements/Vulnerabilities";
import { ethers } from "ethers";

const ConceptCard = ({ title, description, icon: Icon, colors }) => (
  <motion.div
    className={`${colors.bg} p-6 rounded-lg shadow-lg mb-6`}
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5 }}
  >
    <div className="flex items-center mb-2">
      <Icon className={`mr-2 ${colors.accent}`} size={24} />
      <h3 className={`text-xl font-bold ${colors.accent}`}>{title}</h3>
    </div>
    <p className={colors.text}>{description}</p>
  </motion.div>
);

const sampleContract = `
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 private storedData;
    
    function set(uint256 x) public {
        storedData = x;
    }
    
    function get() public view returns (uint256) {
        return storedData;
    }
}
`;

const sampleABI = [
  {
    inputs: [],
    name: "get",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "x", type: "uint256" }],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const InteractiveDemo = ({ colors }) => {
  const [contractAddress, setContractAddress] = useState("");
  const [contractABI, setContractABI] = useState(
    JSON.stringify(sampleABI, null, 2)
  );
  const [contractCode, setContractCode] = useState(sampleContract);
  const [result, setResult] = useState("");

  const handleScan = async () => {
    setResult("Scanning...");
    // Simulated scanning process
    await new Promise((resolve) => setTimeout(resolve, 2000));
    setResult("Potential vulnerabilities found: Reentrancy, Integer Overflow");
  };

  return (
    <div className={`${colors.bg} p-6 rounded-lg shadow-lg mb-6`}>
      <h3 className={`text-xl font-bold ${colors.accent} mb-4`}>
        Interactive Scanning Demo
      </h3>
      <div className="mb-4">
        <h4 className={`text-lg font-semibold ${colors.accent} mb-2`}>
          Contract Code
        </h4>
        <textarea
          value={contractCode}
          onChange={(e) => setContractCode(e.target.value)}
          className={`w-full p-2 ${
            colors.bg === "bg-gray-900" ? "bg-gray-800" : "bg-white"
          } ${colors.text} rounded font-mono`}
          rows={10}
        />
      </div>
      <div className="mb-4">
        <h4 className={`text-lg font-semibold ${colors.accent} mb-2`}>
          Contract ABI
        </h4>
        <textarea
          value={contractABI}
          onChange={(e) => setContractABI(e.target.value)}
          className={`w-full p-2 ${
            colors.bg === "bg-gray-900" ? "bg-gray-800" : "bg-white"
          } ${colors.text} rounded font-mono`}
          rows={5}
        />
      </div>
      <input
        type="text"
        placeholder="Contract Address (optional)"
        className={`w-full p-2 mb-2 ${
          colors.bg === "bg-gray-900" ? "bg-gray-800" : "bg-white"
        } ${colors.text} rounded`}
        value={contractAddress}
        onChange={(e) => setContractAddress(e.target.value)}
      />
      <button
        onClick={handleScan}
        className={`${colors.button} ${colors.buttonText} px-4 py-2 rounded hover:opacity-80 transition-colors`}
      >
        Scan Contract
      </button>
      {result && (
        <div
          className={`mt-4 p-4 ${
            colors.bg === "bg-gray-900" ? "bg-gray-800" : "bg-white"
          } ${colors.text} rounded`}
        >
          <h4 className="font-bold mb-2">Scan Result:</h4>
          <p>{result}</p>
        </div>
      )}
    </div>
  );
};

const PentestIntro = () => {
  const [activeSection, setActiveSection] = useState("intro");
  const [theme, setTheme] = useState("dark");
  const contentRef = useRef(null);

  const sections = useMemo(
    () => [
      { id: "intro", title: "Introduction", icon: Shield },
      { id: "methodology", title: "Methodology", icon: Terminal },
      { id: "tools", title: "Tools", icon: Search },
      { id: "vulnerabilities", title: "Vulnerabilities", icon: AlertTriangle },
      { id: "reporting", title: "Reporting", icon: FileText },
      { id: "interactive", title: "Demo", icon: Play },
    ],
    []
  );

  const getThemeColors = () => {
    return theme === "dark"
      ? {
          bg: "bg-gray-900",
          text: "text-gray-100",
          accent: "text-indigo-400",
          button: "bg-indigo-600 hover:bg-indigo-700",
          buttonText: "text-white",
        }
      : {
          bg: "bg-gray-100",
          text: "text-gray-900",
          accent: "text-indigo-600",
          button: "bg-indigo-500 hover:bg-indigo-600",
          buttonText: "text-white",
        };
  };

  const colors = getThemeColors();

  useEffect(() => {
    const timer = setTimeout(() => {
      if (contentRef.current) {
        contentRef.current.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  const renderSection = useCallback(() => {
    switch (activeSection) {
      case "intro":
        return (
          <>
            <ConceptCard
              title="What is Smart Contract Penetration Testing?"
              description="Smart contract penetration testing is the practice of analyzing and testing smart contracts and blockchain applications to find security vulnerabilities that an attacker could exploit. It's crucial for ensuring the integrity and security of decentralized applications and cryptocurrency platforms."
              icon={Shield}
              colors={colors}
            />
            <ConceptCard
              title="Understanding Contract Code and ABI"
              description="The contract code is the actual Solidity code that defines the smart contract's functionality. The ABI (Application Binary Interface) is a JSON representation of the contract's interface, defining how to call its functions and what data to expect in return. Both are essential for interacting with and testing smart contracts."
              icon={Code}
              colors={colors}
            />
            <InteractiveDemo colors={colors} />
          </>
        );
      case "methodology":
        return <Methodology colors={colors} />;
      case "tools":
        return <Tools colors={colors} />;
      case "vulnerabilities":
        return <Vulnerabilities colors={colors} />;
      case "reporting":
        return (
          <>
            <ConceptCard
              title="Smart Contract Audit Reports"
              description="A comprehensive report is crucial in smart contract penetration testing. It details all findings, including discovered vulnerabilities, their potential impact on the blockchain application, and recommendations for remediation. This report guides developers in improving the security of their smart contracts."
              icon={FileText}
              colors={colors}
            />
            <div className={`${colors.bg} p-4 rounded-lg shadow-lg mb-6`}>
              <h3 className={`text-xl font-semibold mb-2 ${colors.accent}`}>
                Key Components of a Smart Contract Audit Report
              </h3>
              <ul className={`list-disc list-inside ${colors.text}`}>
                <li>Executive Summary</li>
                <li>Scope and Methodology</li>
                <li>Smart Contract Vulnerabilities and Findings</li>
                <li>Risk Assessment and Impact Analysis</li>
                <li>Remediation Recommendations</li>
                <li>Code Snippets and Proof of Concept</li>
              </ul>
            </div>
            <div className={`${colors.bg} p-4 rounded-lg shadow-lg mb-6`}>
              <h3 className={`text-xl font-semibold mb-2 ${colors.accent}`}>
                Best Practices for Effective Reporting
              </h3>
              <ul className={`list-disc list-inside ${colors.text}`}>
                <li>Use clear, concise language</li>
                <li>Prioritize vulnerabilities based on severity</li>
                <li>Provide detailed explanations for each finding</li>
                <li>Include practical remediation steps</li>
                <li>Use visualizations to illustrate complex concepts</li>
                <li>
                  Tailor the report for both technical and non-technical
                  audiences
                </li>
              </ul>
            </div>
          </>
        );
      case "interactive":
        return <InteractiveDemo colors={colors} />;
      default:
        return null;
    }
  }, [activeSection, colors]);

  return (
    <div className={`min-h-screen ${colors.bg}`}>
      <div className="h-screen flex items-center justify-center">
        <motion.h1
          className={`text-4xl md:text-6xl font-bold ${colors.accent} text-center px-4`}
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Smart Contract and Blockchain Penetration Testing
        </motion.h1>
      </div>

      <motion.div
        ref={contentRef}
        className={`${colors.bg} rounded-lg shadow-lg p-6 max-w-4xl mx-auto mb-12`}
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5, duration: 0.5 }}
      >
        <nav className="mb-8">
          <ul className="flex flex-wrap justify-center gap-4">
            {sections.map((section) => (
              <motion.li
                key={section.id}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <button
                  className={`px-4 py-2 rounded-full flex items-center ${
                    activeSection === section.id
                      ? `${colors.button} ${colors.buttonText}`
                      : `${colors.bg} ${colors.accent} border border-current`
                  }`}
                  onClick={() => setActiveSection(section.id)}
                >
                  <section.icon size={18} className="mr-2" />
                  {section.title}
                </button>
              </motion.li>
            ))}
          </ul>
        </nav>

        <AnimatePresence mode="wait">
          <motion.div
            key={activeSection}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.5 }}
          >
            {renderSection()}
          </motion.div>
        </AnimatePresence>

        <motion.div
          className={`mt-8 ${
            theme === "dark" ? colors.bg : "bg-gray-200"
          } p-4 rounded-lg`}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.7 }}
        >
          <h3 className={`text-xl font-semibold mb-2 ${colors.accent}`}>
            Key Takeaways
          </h3>
          <ul className={`list-disc list-inside ${colors.text}`}>
            <li>
              Smart contract penetration testing is crucial for blockchain
              security
            </li>
            <li>A structured methodology ensures comprehensive coverage</li>
            <li>
              Various tools are available to assist in the testing process
            </li>
            <li>
              Understanding common vulnerabilities is essential for both testers
              and developers
            </li>
            <li>Detailed reporting guides remediation efforts</li>
            <li>
              Implementing security best practices significantly reduces risk
            </li>
          </ul>
        </motion.div>

        <div className="mt-4 flex justify-end">
          <button
            onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            className={`${colors.button} ${colors.buttonText} px-4 py-2 rounded transition-colors`}
          >
            <Settings size={18} className="mr-2 inline" />
            Change Theme
          </button>
        </div>
      </motion.div>
    </div>
  );
};

export default PentestIntro;
